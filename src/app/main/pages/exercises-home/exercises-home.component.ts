import { Component, OnInit, ViewChild } from '@angular/core';
import { TableGridDataTypeEnum } from "../../../core/components/table-grid";
import { MatDialog } from "@angular/material/dialog";
import { UsersService } from "../users/users.service";
import { Firestore, collection, getDocs, query, where, deleteDoc, doc, orderBy, limit, startAfter, DocumentSnapshot } from '@angular/fire/firestore';
import { Router } from "@angular/router";
import { MatSnackBar } from "@angular/material/snack-bar";
import { MatPaginator, PageEvent } from '@angular/material/paginator';
import { forkJoin, switchMap, from } from "rxjs";

@Component({
  selector: 'app-exercises',
  templateUrl: './exercises-home.component.html',
  styleUrls: ['./exercises-home.component.scss']
})
export class ExercisesHomeComponent implements OnInit {
  tableGridDataTypeEnum = TableGridDataTypeEnum;
  @ViewChild(MatPaginator) paginator: MatPaginator; // –î–æ–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ç–æ—Ä

  users = [];
  totalUsersCount = 0;
  pageSize = 10; // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  lastVisible: DocumentSnapshot | null = null; // –î–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó

  constructor(
    private dialog: MatDialog,
    private usersService: UsersService,
    private firestore: Firestore,
    public snackBar: MatSnackBar,
    private router: Router
  ) { }

  ngOnInit(): void {
    this.getTotalUsersCount();
    this.getUsers();
  }

  getTotalUsersCount() {
    const exercisesCollection = collection(this.firestore, 'exercise-names-home');
    getDocs(exercisesCollection).then(snapshot => {
      this.totalUsersCount = snapshot.size;
    }).catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–ø—Ä–∞–≤: ", error));
  }

  getUsers(pageIndex: number = 0, newPageSize: number = this.pageSize): void {
    this.pageSize = newPageSize; // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ `pageSize`

    let exercisesCollection = collection(this.firestore, 'exercise-names-home');
    let q = query(
      exercisesCollection,
      limit(this.pageSize)
    );

    if (this.lastVisible && pageIndex > 0) {
      q = query(q, startAfter(this.lastVisible)); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    } else {
      this.lastVisible = null; // ‚úÖ –°–∫–∏–¥–∞—î–º–æ `lastVisible`, —è–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è `pageSize`
    }

    getDocs(q).then(snapshot => {
      if (!snapshot.empty) {
        this.lastVisible = snapshot.docs[snapshot.docs.length - 1];
        this.users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        console.log('1111, this.users', this.users)
      }
    }).catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–ø—Ä–∞–≤: ", error));
  }

  onPageChange(event: PageEvent) {
    console.log("üìå –ó–º—ñ–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:", event);

    // ‚úÖ –ü–µ—Ä–µ–¥–∞—î–º–æ –Ω–æ–≤–∏–π `pageSize`, —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω—é—î—Ç—å—Å—è
    this.getUsers(event.pageIndex, event.pageSize);
  }

  deleteExercise(exercise) {
    const collectionRef = collection(this.firestore, 'exercise-names-home');
    const q = query(collectionRef, where('id', '==', exercise.id));

    getDocs(q).then(snapshot => {
      if (!snapshot.empty) {
        snapshot.forEach(docSnapshot => {
          const docRef = doc(this.firestore, 'exercise-names-home', docSnapshot.id);
          deleteDoc(docRef).then(() => {
            this.snackBar.open('–í–ø—Ä–∞–≤—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ', '–ó–∞–∫—Ä–∏—Ç–∏', { duration: 2000 });
            this.getUsers(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
          }).catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–ø—Ä–∞–≤–∏:", error));
        });
      }
    }).catch(error => console.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤–ø—Ä–∞–≤–∏:", error));
  }

  moveToExegesis(id) {
    this.router.navigate([`/exercises-home/edit-exercise`, id]);
  }
}
